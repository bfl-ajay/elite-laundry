# Multi-stage Dockerfile for Backend
FROM node:18-alpine AS base

# Install security updates and required packages
RUN apk update && apk upgrade && \
    apk add --no-cache dumb-init && \
    rm -rf /var/cache/apk/*

# Create app directory and user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001

WORKDIR /app

# Copy package files
COPY backend/package*.json ./

# Development stage
FROM base AS development

# Copy source code first (excluding node_modules)
COPY backend/ ./
RUN rm -rf node_modules

# Install all dependencies and rebuild native modules
RUN npm install && \
    npm rebuild && \
    npm cache clean --force

RUN chown -R backend:nodejs /app
USER backend
EXPOSE 5000
CMD ["npm", "run", "dev"]

# Production stage
FROM base AS production

# Copy source code first (excluding node_modules)
COPY backend/ ./
RUN rm -rf node_modules

# Install production dependencies and rebuild native modules
RUN npm ci --only=production && \
    npm rebuild && \
    npm cache clean --force

RUN mkdir -p uploads && \
    chown -R backend:nodejs /app && \
    chmod -R 755 /app && \
    chmod 777 uploads

USER backend

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

EXPOSE 5000
ENTRYPOINT ["dumb-init", "--"]
CMD ["npm", "start"]